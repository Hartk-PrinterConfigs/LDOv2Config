#########################
#### BASE_MACROS.CFG ####
#########################

##### Variables #####
[gcode_macro MACROS_VARS]
variable_circ_fan_speed:        255
variable_probe_temp:            150
variable_starting_wled:           2
variable_heating_wled:            4
variable_ending_wled:             3
variable_ending_length:          25
variable_purge_length:           40
variable_filament_swap_length:  0.8
variable_pla_pa:             0.0345
variable_pet_pa:             0.0345
variable_abs_pa:             0.0345
variable_pet_za:              0.010
variable_pla_za:              -0.0
variable_move_away_home:         10
variable_fast: 1.0	# Fan speed once bed temp is reached  
variable_slow: 0.2	
gcode:


[gcode_macro DISPLAYTEXT]
gcode:

    {% set TEXT = params.TEXT|default("")|string %} 
    RESPOND MSG="{TEXT}"
    SET_DISPLAY_TEXT MSG="{TEXT}"

[gcode_macro MATERIAL_PA]
gcode:
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}
    {% set TEXT ="Setting PA for " + MATERIAL %}
    {% set PLA = printer["gcode_macro MACROS_VARS"].pla_pa|default(0)%}
    {% set PET = printer["gcode_macro MACROS_VARS"].pet_pa|default(0)%}
    {% set ABS = printer["gcode_macro MACROS_VARS"].abs_pa|default(0)%}
    {% set PETZ = printer["gcode_macro MACROS_VARS"].pet_za|default(0)%}
    {% set PLAZ = printer["gcode_macro MACROS_VARS"].pla_za|default(0)%}
    
    {% if MATERIAL == "PLA" %}
    SET_PRESSURE_ADVANCE ADVANCE={PLA}
    SET_GCODE_OFFSET Z_ADJUST={PLAZ} MOVE=1
    {% elif MATERIAL == "PET" %}
    SET_PRESSURE_ADVANCE ADVANCE={PET}
    SET_GCODE_OFFSET Z_ADJUST={PETZ} MOVE=1
    {% elif MATERIAL == "ABS" %}
    SET_PRESSURE_ADVANCE ADVANCE={ABS}
    {% else %}
       {% set TEXT ="No PA value for " + MATERIAL %}
    {% endif %}
    DISPLAYTEXT TEXT="{TEXT}"

[gcode_macro M600]
gcode:
     {% set th = printer.toolhead %}
     {% set TEXT = "Change Filament"|string %}
     {% set FSL = printer["gcode_macro MACROS_VARS"].filament_swap_length|default(0)%}

     DISPLAYTEXT TEXT="{TEXT}"
     PAUSE
     RELATIVE_COORDINATES
     G1 E-{FSL} F2700
     G1 Z30
     ABSOLUTE_COORDINATES
     G1 X{th.axis_maximum.x//2} Y10 F3000

[gcode_macro CHANGE_NOZZLE]
gcode:
     {% set th = printer.toolhead %}
     {% set TEXT = "Change Nozzle"|string %}
     DISPLAYTEXT TEXT="{TEXT}"
     CHOME
     G0 X{th.axis_maximum.x//2} Y2 Z100
 
[gcode_macro SET_TEMP]
gcode:
    {% set HEATER = params.HEATER|default("")|string %}
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    {% if HEATER == "extruder" %}
      {% if WAIT == 1 %}
    M109 S{TEMP}
      {% else %}
    M104 S{TEMP}
      {% endif %}
    {% else %}
     {% if WAIT == 1 %}
    M190 S{TEMP}
      {% else %}
    M140 S{TEMP}
      {% endif %}
    {% endif %}

[gcode_macro SET_FAN]
gcode:
    {% set SPEED = params.SPEED|default(0)|int %}
    {% if SPEED == 0 %}
    M107
    {% else %}
    M106 S{SPEED}
    {% endif %}
 
[gcode_macro TEMPERATURE_WAIT]
rename_existing: _TEMPERATURE_WAIT
gcode:
    {% set SENSOR = params.SENSOR|default("")|string %}
    {% set MINIMUM = params.MINIMUM|int %}
    {% set MSG = SENSOR + "temperature has reached " + MINIMUM |string %}
    DISPLAYTEXT TEXT="Heatsoaking, Please wait.."
    _TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} 
    DISPLAYTEXT TEXT="{MSG}"

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    DISPLAYTEXT TEXT="Turning off heaters"
    _TURN_OFF_HEATERS 
    DISPLAYTEXT TEXT="Heaters turned off"

[gcode_macro DISABLE_MOTORS]
gcode:
   M84

[gcode_macro RESET_EXTRUDER]
gcode:
    DISPLAYTEXT TEXT="Resetting Extruder"
    G92 E0 ; reset extruder
    DISPLAYTEXT TEXT="Extruder Reset"


[gcode_macro PARK]
gcode:
    #SMART_PARK
   # {% set th = printer.toolhead %}
    #ABSOLUTE_COORDINATES
    DISPLAYTEXT TEXT="Parking"
    SMART_PARK
#G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  
    DISPLAYTEXT TEXT="Parked"

[gcode_macro HOME_Z_AFTER_QGL]
gcode:
    DISPLAYTEXT TEXT="Homing Z"
    G28 Z


[gcode_macro PARK_AT_PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set y_move = printer["gcode_macro MACROS_VARS"].move_away_home|default(0)%}
   

    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - y_move + 5} F3600  ; park nozzle at rear center
    

[gcode_macro PURGE]
gcode:    
     #{% set EXTRUDE = printer["gcode_macro MACROS_VARS"].ending_length|default(0)%}
     #{% set PURGE = printer["gcode_macro MACROS_VARS"].purge_length|default(0)%}
     DISPLAYTEXT TEXT="Purging"
   #  RESET_EXTRUDER
   #  G1 X55 Y3 Z0.85 F12000;
    # G1 E{EXTRUDE} F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
   #  G1 X75 Y3 E{PURGE} F100;
    # G1 X80 F18000;
     VORON_PURGE
     DISPLAYTEXT TEXT="Purged"

[gcode_macro ENDING_RETRACTION]
gcode:    
     {% set RETRACT = printer["gcode_macro MACROS_VARS"].ending_length|default(0)%}
     G1 E{RETRACT*-1} F1800 

[gcode_macro CLEAR_BUFFER]
gcode:
    M400


[gcode_macro ABSOLUTE_COORDINATES]
gcode:
    G90

[gcode_macro RELATIVE_COORDINATES]
gcode:
    G91

[gcode_macro ABSOLUTE_EXTRUSION]
gcode:
    M82

[gcode_macro RELATIVE_EXTRUSION]
gcode:
    M83

[gcode_macro WAIT]
gcode:
    {% set TIME = params.TIME|default(0)|int %}
    G4 P{TIME*1000}

[delayed_gcode BACKUP_ON_BOOT]
initial_duration: 1
gcode:
        BACKUP_CFG

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro MACROS_VARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro MACROS_VARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0


[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(10) | int) * 60 %} ## minutes to seconds
    {% set HOME = params.HOME| default(0) | int %}
    {% set FANSPD = printer["gcode_macro MACROS_VARS"].circ_fan_speed|default(0)%}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_TEMP HEATER="bed" TEMP={TARGET}; 
    ;; run the fan to circulate air
    SET_FAN SPEED={FANSPD} ;Turn fan on full blast to help circulate the air
    ;; put the bed and nozzle where they're a safe distance apart
    BEDFANSFAST
    {% if HOME == 1 %}
       HOME
       PARK
    {% endif %}
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    BEDFANSOFF
[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}